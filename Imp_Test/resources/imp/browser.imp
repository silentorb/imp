namespace browser {
	external class Window {
		$q:Q
	}
	
	external class Injector {
		get(name:string)
	}

	external class Angular {
		injector(name:string):Injector
	}

	external class Promise {
		then(a):Promise
	}

	external class Q {
		defer():Deferred
	}

	external class Deferred {
		resolve()
		reject()
		promise:Promise		
	}

	external class Json {
		stringify(input)
		parse(input:string)
	}

	external class jQuery_Class {
		ajax()
	}
}

external var window:browser.Window
external var angular:browser.Angular
external var $q:browser.Q
external var JSON:browser.Json
external var jQuery:browser.jQuery_Class


namespace bloom {

	abstract class Response {
		objects:any[]
	}

	abstract class User {
		username:string
	}

  class Garden {
    static vineyard_url:string = 'http://localhost:3000/'

    static start() {
      var $injector = angular.injector(['ng'])
      window.$q = $injector.get('$q')

	  query({
		  "trellis": "user",
		  "filters": [
			{
			  "path": "id",
			  "value": "user",
			  "type": "parameter"
			}
		  ],
		  "version": "1.0.0.browser"
		})
		.then((response:bloom.Response)=> {
			var user:User = response.objects.get(0)
			if (user.username == 'anonymous') {
				Garden.goto('garden-login')
			}
			else {
				Garden.goto('garden-hub')
			}
		})
    }
	
	  static query(data):browser.Promise {
		return Garden.post('vineyard/query', data)
	  }
	  
  static post(path, data) {
    return http('POST', path, data)
  }

  static get(path) {
    return http('GET', path)
  }

  static http(method, path, data = null) {
    var def = $q.defer()
    var options = {
      method: method,
      contentType: 'application/json',
      crossDomain: true,
      xhrFields: {
        withCredentials: true
      },
      data: JSON.stringify(data),
      dataType: 'json',
      success: (response)=> {
        def.resolve(response)
      }
    }

    jQuery.ajax	(this.vineyard_url + path, options)

    return def.promise
  }
  }
}