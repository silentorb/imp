spaces(ignore) = /[ \t]+/
newlines(optional) = /(\s*\n)+\s*/
comma = ","
path_separator = "."
comma_or_newline = newlines | comma
semicolon_or_newline = newlines | ";"
line_comment(ignore) = "//[^\r\n]*"
string_value = /"[^"]*"|'[^']*'/
bool_value = "true" | "false"
int_value = /-?[0-9]+/
float_value = /-?([0-9]*\.)?[0-9]+f?/
arrow = "=>"
insert = /\$\w+/
complex_set_operator = '+=' | '-=' | '*=' | '/=' | '@='
operator_token = '+' | '-' | '/' | '*' | '<=' | '>=' | '<' | '>' | '==' | '!=' | '&&' | '||'
set_operator = equals | complex_set_operator
equals = "="

block_start = "{"
block_end = "}"

group_start = "("
group_end = ")"

array_start = "["
array_end = "]"

colon = ":"

id_token = /[a-zA-Z0-9_]+/

keyword(id_token>) =
	  "abstract"
	| "break"
	| "catch"
	| "class"
	| "const"
	| "continue"
	| "delete"
	| "do"
	| "else"
	| "enum"
	| "export"
	| "external"
	| "if"
	| "import"
	| "in"
	| "finally"
	| "for"
	| "namespace"
	| "new"
	| "null"
	| "private"
	| "public"
	| "return"
	| "static"
	| "throw"
	| "while"
	| "var"

type =
	  "bool"
	| "int"
	| "float"
	| "string"

ws(tween) = /[ \t]+/